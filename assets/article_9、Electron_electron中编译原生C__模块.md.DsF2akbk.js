import{_ as s,c as e,o as a,a3 as t,a4 as i,a5 as n}from"./chunks/framework.O95JGkcW.js";const k=JSON.parse('{"title":"electron中编译原生C++模块","description":"","frontmatter":{"title":"electron中编译原生C++模块"},"headers":[],"relativePath":"article/9、Electron/electron中编译原生C++模块.md","filePath":"article/9、Electron/electron中编译原生C++模块.md","lastUpdated":1723097831000}'),l={name:"article/9、Electron/electron中编译原生C++模块.md"},p=t('<h1 id="electron中编译原生c-模块-以sqlite3为例" tabindex="-1">electron中编译原生C++模块，以sqlite3为例 <a class="header-anchor" href="#electron中编译原生c-模块-以sqlite3为例" aria-label="Permalink to &quot;electron中编译原生C++模块，以sqlite3为例&quot;">​</a></h1><p>npm包中部分模块只实现了对Nodejs原生环境的支持，或者只有C++源码，在有的electron版本或平台中使用需要进行编译，否则在导入使用或者打包时会报错。</p><h2 id="一、windows环境" tabindex="-1">一、Windows环境 <a class="header-anchor" href="#一、windows环境" aria-label="Permalink to &quot;一、Windows环境&quot;">​</a></h2><p>1、安装Python 3.10+、VisualStudio2017 （编译需要C++环境） <img src="'+i+'" alt="dependent"></p><p>VisualStudio安装注意</p><p><img src="'+n+`" alt="VisualStudio"> (1)勾选C++生成工具，以及右侧三项 (2)设置npm在 Windows 平台上使用的 Visual Studio 编译工具的版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm config set msvs_version 2017</span></span></code></pre></div><p>2、安装全局依赖node-gyp（使用管理员命令安装）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm install -g node-gyp</span></span></code></pre></div><p>3、electron项目中安装依赖</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm i sqlite</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -S</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm i @electron/rebuild -D</span></span></code></pre></div><p>4、项目的package.json文件的script中添加脚本命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;scripts&quot;: {</span></span>
<span class="line"><span>	&quot;rebuild&quot;: &quot;electron-rebuild -f -w sqlite3&quot;,</span></span>
<span class="line"><span>},</span></span></code></pre></div><p>可以使用<code>electron-rebuild</code>编译项目中所有的原生模块，也可以通过<code>electron-rebuild -f -w &lt;moduleName&gt;</code>编译指定的原生模块。</p><p>5、运行rbuild脚本命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>npm run rbuild</span></span></code></pre></div>`,16),o=[p];function c(d,r,h,u,g,_){return a(),e("div",null,o)}const b=s(l,[["render",c]]);export{k as __pageData,b as default};
